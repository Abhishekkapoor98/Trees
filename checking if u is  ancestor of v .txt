#include<bits/stdc++.h>
using namespace std;

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x<<" "; _print(x); cerr << endl;
#else
#define debug(x);
#endif

typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
// typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key

void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

#define fast_io ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define lli long long int
#define mod 1000000007
#define PB push_back
#define PPB pop_back
#define MP make_pair
#define vi vector<int>
#define vc vector<char>
#define vlli vector<long long int>
#define uos unordered_set<int>
#define min_heap priority_queue<int,vector<int>,greater<int>>
#define max_heap priority_queue<int>
#define pii pair<int,int>
#define F first
#define S second
#define loop(a,b) for(lli i=a;i<=b;i++)
#define endl '\n'
#define ll long long

vector<pair<int,int>> look[100005];
vector<int> graph[100005];

void add_edge(vector<int>graph[], int u, int v){
	graph[u].PB(v);
}
	
void count_technique(int root, vi graph[], int parent, int &count)
{
	int FF = count++;

	for(auto itr : graph[root])
		if(itr != parent)
			count_technique(itr,graph,root,count);

	look[root].PB(MP(FF,count));
	count++;
}

void solve()
{
	int t;
	cin>>t;
	debug(t);

	while(t--)
	{
		int n,e;
		int count = 0;
		cin>>n>>e;
		
		debug(n);
		debug(e);

		for(int i=0;i<e;i++)
		{
			int u,v;
			cin>>u>>v;

			add_edge(graph,u,v);
		}
		
		debug(count);

		count_technique(1,graph,-1,count);
		
		debug(count);
		
		int u,v;
		cin>>u>>v;

		if(look[u].begin()->F < look[v].begin()->F && look[v].begin()->F < look[v].begin()->S && look[v].begin()->S < look[u].begin()->S)
			cout<<u<<" is ancesstor of "<<v<<endl;
		else
			cout<<u<<" is not ancesstor of "<<v<<endl;
	}
}

int main()
{
	fast_io;

#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	freopen("error.txt","w",stderr);
#endif

	solve();

	return 0;
}
